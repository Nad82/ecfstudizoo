generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                      Int     @id @default(autoincrement())
  type                    String? @db.VarChar(255)
  provider                String? @db.VarChar(255)
  provider_accountId      String? @db.VarChar(255)
  refresh_token           String? @db.VarChar(255)
  access_token            String? @db.VarChar(255)
  expire_at               Int?
  token_type              String? @db.VarChar(255)
  scope                   String? @db.VarChar(255)
  id_token                String? @db.Text
  session_state           String? @db.VarChar(255)
  refresh_token_expire_in Int?
  user_id                 Int     @unique(map: "user_id")
  user                    user    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_ibfk_1")
}

model animal {
  id                  Int                   @id @default(autoincrement())
  prenom              String?               @db.VarChar(40)
  race                String?               @db.VarChar(40)
  habitatId           Int?
  habitat             habitat?              @relation(fields: [habitatId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "animal_ibfk_1")
  compte_rendu        compte_rendu[]
  consommation_animal consommation_animal[]
  image_animal        image_animal[]

  @@index([habitatId], map: "habitatId")
}

model avis {
  id           Int      @id @default(autoincrement())
  pseudo       String?  @db.VarChar(40)
  commentaires String?  @db.VarChar(255)
  published    Boolean?
}

model compte_rendu {
  id                  Int       @id @default(autoincrement())
  etat                String?   @db.VarChar(40)
  nourriture          String?   @db.VarChar(40)
  quantite_nourriture Int?
  heure_passage       DateTime? @db.DateTime(0)
  animalId            Int?
  animal              animal?   @relation(fields: [animalId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "compte_rendu_ibfk_1")

  @@index([animalId], map: "animalId")
}

model consommation_animal {
  id         Int       @id @default(autoincrement())
  nourriture String?   @db.VarChar(40)
  quantite   Int?
  heure      DateTime? @db.DateTime(0)
  animalId   Int?
  animal     animal?   @relation(fields: [animalId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "consommation_animal_ibfk_1")

  @@index([animalId], map: "animalId")
}

model etat_habitat {
  id           Int      @id @default(autoincrement())
  commentaires String?  @db.Text
  amelioration Boolean?
  habitatId    Int?
  habitat      habitat? @relation(fields: [habitatId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "etat_habitat_ibfk_1")

  @@index([habitatId], map: "habitatId")
}

model habitat {
  id            Int             @id @default(autoincrement())
  nom           String?         @db.VarChar(40)
  description   String?         @db.Text
  animal        animal[]
  etat_habitat  etat_habitat[]
  image_habitat image_habitat[]
}

model horaires {
  id          Int     @id @default(autoincrement())
  description String? @db.Text
}

model image_animal {
  id       Int     @id @default(autoincrement())
  image    Bytes?  @db.Blob
  animalId Int?
  animal   animal? @relation(fields: [animalId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "image_animal_ibfk_1")

  @@index([animalId], map: "animalId")
}

model image_habitat {
  id        Int      @id @default(autoincrement())
  habitatId Int?
  image     Bytes?   @db.Blob
  habitat   habitat? @relation(fields: [habitatId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "image_habitat_ibfk_1")

  @@index([habitatId], map: "habitatId")
}

model role {
  id   Int     @id @default(autoincrement())
  nom  String? @db.VarChar(20)
  user user[]
}

model services {
  id          Int     @id @default(autoincrement())
  nom         String? @db.VarChar(40)
  description String? @db.Text
}

model session {
  id            Int       @id @default(autoincrement())
  session_token String?   @unique(map: "session_token") @db.VarChar(255)
  expires       DateTime? @db.DateTime(0)
  created_at    DateTime? @db.DateTime(0)
  updated_at    DateTime? @db.DateTime(0)
  user_id       Int       @unique(map: "user_id")
  user          user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "session_ibfk_1")
}

model user {
  id             Int       @id @default(autoincrement())
  email          String    @unique(map: "email") @db.VarChar(70)
  password       String?   @db.VarChar(20)
  email_verified DateTime? @db.DateTime(0)
  created_at     DateTime? @db.DateTime(0)
  updated_at     DateTime? @db.DateTime(0)
  role_id        Int
  account        account?
  session        session?
  role           role      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_ibfk_1")

  @@index([role_id], map: "role_id")
}

model verification_token {
  id      Int       @id @default(autoincrement())
  token   String?   @db.VarChar(255)
  expires DateTime? @db.DateTime(0)
}
