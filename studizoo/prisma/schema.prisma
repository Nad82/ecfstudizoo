generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                      Int     @id @default(autoincrement())
  type                    String? @db.VarChar(255)
  provider                String? @db.VarChar(255)
  provider_accountId      String? @db.VarChar(255)
  refresh_token           String? @db.VarChar(255)
  access_token            String? @db.VarChar(255)
  expire_at               Int?
  token_type              String? @db.VarChar(255)
  scope                   String? @db.VarChar(255)
  id_token                String? @db.Text
  session_state           String? @db.VarChar(255)
  refresh_token_expire_in Int?
  user_id                 Int     @unique(map: "user_id")
  user                    user    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_ibfk_1")
}

model animal {
  id                     Int                  @id @default(autoincrement())
  prenom                 String               @db.VarChar(40)
  race                   String               @db.VarChar(40)
  habitat_id             Int?
  image_animal_id        Int?
  compte_rendu_id        Int?
  consommation_animal_id Int?
  habitat                habitat?             @relation(fields: [habitat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "animal_ibfk_1")
  image_animal           image_animal?        @relation(fields: [image_animal_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "animal_ibfk_2")
  compte_rendu           compte_rendu?        @relation(fields: [compte_rendu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "animal_ibfk_3")
  consommation_animal    consommation_animal? @relation(fields: [consommation_animal_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "animal_ibfk_4")

  @@index([compte_rendu_id], map: "compte_rendu_id")
  @@index([consommation_animal_id], map: "consommation_animal_id")
  @@index([habitat_id], map: "habitat_id")
  @@index([image_animal_id], map: "image_animal_id")
}

model avis {
  id           Int     @id @default(autoincrement())
  pseudo       String  @db.VarChar(40)
  commentaires String  @db.Text
  published    Boolean
}

model compte_rendu {
  id                  Int      @id @default(autoincrement())
  etat                String   @db.VarChar(40)
  nourriture          String   @db.VarChar(50)
  quantite_nourriture Int
  heure_passage       DateTime @db.DateTime(0)
  animal              animal[]
}

model consommation_animal {
  id         Int      @id @default(autoincrement())
  nourriture String   @db.VarChar(40)
  quantite   Int
  heure      DateTime @db.DateTime(0)
  animal     animal[]
}

model etat_habitat {
  id           Int       @id @default(autoincrement())
  commentaires String    @db.Text
  amelioration Boolean
  habitat      habitat[]
}

model habitat {
  id               Int            @id @default(autoincrement())
  nom              String         @db.VarChar(40)
  description      String         @db.Text
  image_habitat_id Int?
  etat_habitat_id  Int?
  animal           animal[]
  image_habitat    image_habitat? @relation(fields: [image_habitat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "habitat_ibfk_1")
  etat_habitat     etat_habitat?  @relation(fields: [etat_habitat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "habitat_ibfk_2")

  @@index([etat_habitat_id], map: "etat_habitat_id")
  @@index([image_habitat_id], map: "image_habitat_id")
}

model horaires {
  id          Int    @id @default(autoincrement())
  description String @db.Text
}

model image_animal {
  id     Int      @id @default(autoincrement())
  nom    String?  @db.VarChar(255)
  animal animal[]
}

model image_habitat {
  id      Int       @id @default(autoincrement())
  nom     String?   @db.VarChar(255)
  habitat habitat[]
}

model role {
  id   Int     @id @default(autoincrement())
  nom  String? @db.VarChar(20)
  user user[]
}

model services {
  id          Int    @id @default(autoincrement())
  nom         String @db.VarChar(40)
  description String @db.Text
}

model session {
  id            Int       @id @default(autoincrement())
  session_token String?   @unique(map: "session_token") @db.VarChar(255)
  expires       DateTime? @db.DateTime(0)
  created_at    DateTime? @db.DateTime(0)
  updated_at    DateTime? @db.DateTime(0)
  user_id       Int       @unique(map: "user_id")
  user          user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "session_ibfk_1")
}

model user {
  id             Int       @id @default(autoincrement())
  email          String    @unique(map: "email") @db.VarChar(70)
  password       String?   @db.VarChar(20)
  email_verified DateTime? @db.DateTime(0)
  created_at     DateTime? @db.DateTime(0)
  updated_at     DateTime? @db.DateTime(0)
  role_id        Int
  account        account?
  session        session?
  role           role      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_ibfk_1")

  @@index([role_id], map: "role_id")
}

model verification_token {
  id      Int       @id @default(autoincrement())
  token   String?   @db.VarChar(255)
  expires DateTime? @db.DateTime(0)
}
